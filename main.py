import os
import json
import datetime
import asyncio
import threading
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    CallbackQueryHandler, MessageHandler, ContextTypes, filters
)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
telegram_app: Application = None  # –ø–æ–∑–∂–µ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω

# –§–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
users_file = "data/users.json"
os.makedirs("data", exist_ok=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    try:
        with open(users_file, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_users(users):
    with open(users_file, "w") as f:
        json.dump(users, f, indent=2)

# Telegram: /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ë–∞–∑–æ–≤—ã–π ‚Äî 199 —Ä—É–±/–º–µ—Å", callback_data='tarif_199')],
        [InlineKeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äî 299 —Ä—É–±/–º–µ—Å", callback_data='tarif_299')],
        [InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º ‚Äî 399 —Ä—É–±/–º–µ—Å", callback_data='tarif_399')],
        [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º", url="https://t.me/T1m11333")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –º–∞—Å—Ç–µ—Ä –ø–æ —Ä–µ–º–æ–Ω—Ç—É –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –∏–∑ –ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=reply_markup
    )

# Telegram: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞—Ä–∏—Ñ–∞
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tarif_map = {
        'tarif_199': "–ë–∞–∑–æ–≤—ã–π ‚Äî 199 —Ä—É–±/–º–µ—Å",
        'tarif_299': "–°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äî 299 —Ä—É–±/–º–µ—Å",
        'tarif_399': "–ü—Ä–µ–º–∏—É–º ‚Äî 399 —Ä—É–±/–º–µ—Å"
    }
    tarif = tarif_map.get(query.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
    user_id = str(query.from_user.id)
    users = load_users()
    users[user_id] = {
        "username": query.from_user.username,
        "tarif": tarif,
        "subscribed_at": str(datetime.date.today())
    }
    save_users(users)
    await query.edit_message_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: {tarif}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )

# Telegram: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    users = load_users()
    if user_id in users and "address" not in users[user_id]:
        users[user_id]["address"] = update.message.text
        save_users(users)
        await update.message.reply_text("üìç –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.")
    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ.")

# Flask: webhook –æ—Ç Telegram
@app.route("/webhook", methods=["POST"])
async def webhook():
    data = request.get_json()
    if telegram_app:
        update = Update.de_json(data, telegram_app.bot)
        await telegram_app.process_update(update)
    return "ok", 200

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞
async def start_telegram():
    global telegram_app
    telegram_app = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).build()

    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CallbackQueryHandler(button))
    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await telegram_app.initialize()
    await telegram_app.bot.set_webhook(
        f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/webhook"
    )
    await telegram_app.start()
    print("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_bot_thread():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(start_telegram())

threading.Thread(target=start_bot_thread).start()
